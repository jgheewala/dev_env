#!/bin/bash

alias tags='$SR_CODE_BASE/tags'
alias asicd='cd $SRC_DIR/asicd'
alias intfd='cd $SRC_DIR/intf'
alias ufibd='cd $SRC_DIR/ufib'
alias utils='cd $SRC_DIR/utils'
alias lldp='cd $SRC_DIR/lldp'

pipdComps=(
"asicd"
"intf"
"adj"
"ufib"
"lldp"
"pm"
"snapl-tools"
)

pkgComps=(
"asicdIntfPkg"
"asicdUfibPkg"
"adjPkg"
"intfPkg"
"ufibPkg"
)

baseComp=(
"chartpackager"
"platforminitx8664"
"pmd"
)

componentCharts=(
"asicd"
"intfd"
"adjd"
"ufibd"
"lldpd"
)

#snapl docker helper functions
function set_docker_info_reg() {
    export MY_DOCKER_USER=jgheewala
    export MY_REPOSITORY=jgheewala
    export MY_DOCKER_PASS=Snaproute_123
}

#if you want to set comp version..use this function and it will automatically set it.
function chart_version() {
    if [ "$1" == "" ]; then
        echo "specify component docker version, for e.g: l3_data_path_demo, v1_dev_11"
        return
    fi
    include_chart=""
    space_char=" "
    termination="\""
    pmd_bootstrap=pmd-bootstrap
    for comp in "${baseComp[@]}"; do
        echo "setting version for comp" $comp
        export VERSION_$comp=$1
    done
    include_chart=$termination
    for comp in "${componentCharts[@]}"; do
        echo "setting version for comp" $comp
        export VERSION_$comp=$1
        include_chart=$include_chart$space_char$comp
    done
    include_chart=$include_chart$space_char$pmd_bootstrap$termination
    echo "export chart version" $include_chart
    export INCLUDE_CHARTS=$include_chart
}

function branch_status {
    echo $SRC_DIR
    cd $SRC_DIR
    for dir in *; do
        cd $dir
        echo $dir
        git status
        cd -
        #cd $SR_CODE_BASE
    done
    cd $SRC_DIR
}

function branch_name {
    echo $SRC_DIR
    cd $SRC_DIR
    for dir in *; do
        cd $dir
        echo ""
        echo $dir
        git branch -v
        echo ""
        cd -
        #cd $SR_CODE_BASE
    done
    cd $SRC_DIR
}

function sync_all_repos {
    echo $SRC_DIR
    cd $SRC_DIR
    for dir in *; do
        cd $dir
        echo ""
        echo $dir
        git pull origin master
        echo ""
        cd -
    done
    cd $SRC_DIR
}

function remove_vendor {
    echo $SRC_DIR
    cd $SRC_DIR
    for dir in *; do
        cd $dir
        echo ""
        echo $dir
        rm -rf vendor
        echo ""
        cd -
    done
    cd $SRC_DIR
}

function dep_ensure_pi_pd {
    echo $SRC_DIR
    cd $SRC_DIR
    for comp in "${pipdComps[@]}"; do
        echo "updating dep version for" $comp
        cd $comp
        echo ""
        echo $PWD
        if [ "$1" == ""  ]; then
            dep ensure -v
        else
            dep ensure -v -$1
        fi
        echo ""
        cd -
    done
    cd $SRC_DIR
}

function pi_pd_make {
    echo $SRC_DIR
    cd $SRC_DIR
    for comp in "${pipdComps[@]}"; do
        echo "doing make for" $comp
        cd $comp
        echo ""
        echo $PWD
	retVal=$?
        if [ "$1" == ""  ]; then
            make
        else
            make $1
        fi
	if [ $retVal -ne 0 ]; then
	    echo "Error"
	    return
	fi
        echo ""
        cd -
    done
    cd $SRC_DIR
}

